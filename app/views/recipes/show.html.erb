<%
# FIXME DUPLICATED IN LIB/UTILS
def parse_args(sentence)
  words = sentence.split(' ', 2)
  args = (words[1] || '').split(',').map(&:strip).map {|a| parse_arg(a)}
end
# FIXME DUPLICATED IN LIB/UTILS
def parse_arg(arg)
  return arg.to_i if arg.to_i.to_s == arg
  return arg.to_r if arg.to_r.to_s == arg
  return arg.to_f if arg.to_f.to_s == arg
  return arg
end
def pretty_ingredient(ingredient)
  result = "<li>"
  if ingredient.is_unitary?
    result += (pretty_fraction ingredient.nb_units)
    str = (ingredient.nb_units >= 2) ? ingredient.plural : ingredient.name
    result += " #{link_to translated(str.downcase), ingredient.food}"
  else
    result += pretty_volume(ingredient)
    result += " #{link_to translated(ingredient.name.downcase), ingredient.food}"
    result += " #{pretty_base_unit(ingredient)}"
  end
  result += "</li>"
  result
end
def pretty_print_recipe(recipe)
  notes = []
  result = "<ol>"
  recipe.instructions.downcase.lines.map(&:strip).map do |sentence|
    if sentence.start_with?("contenant")
      nb = parse_args(sentence)[0]
      ings = recipe.ingredients.filter {|ing| ing.container_nb == nb}
      next if ings.blank?
      result += "<li>Dans un contenant, ajouter:<ul>"
      ings.each do |ing| # TODO: Only ingredients for this container (add container_id to ingredients)
        result += pretty_ingredient(ing)
      end
      result += "</ul></li>"
    elsif sentence.start_with?("mijoter")
      result += "<li>Faire mijoter pendant #{parse_args(sentence)[0]} minutes.</li>"
    elsif sentence.start_with?("tremper")
      result += "<li>Laisser tremper pendant #{parse_args(sentence)[0]} heures.</li>"
    elsif sentence.start_with?("mélanger")
      result += "<li>Bien mélanger à l'aide d'un mélangeur à main.</li>"
    elsif sentence.start_with?("battre")
      result += "<li>Bien mélanger à l'aide d'un batteur à main.</li>"
    elsif sentence.start_with?("remuer")
      result += "<li>Remuer.</li>"
    elsif sentence.start_with?("#.")
      result += "<li>#{sentence[2..-1].strip.capitalize}</li>"
    elsif sentence.start_with?("##")
      notes << "<i>#{sentence[2..-1].strip.capitalize}</i>"
    end
  end
  @listing_ingredients = false
  result += "</ol>"
  result += notes.join('<br>')
  result.html_safe
end
%>


<style>
.subnav-link {
  display: block;
  padding: 0.35rem 0.7rem;
  font-size: 0.9rem;
}
.subnav-item {
  display: block;
  padding: 0.35rem 0.7rem;
  font-size: 0.9rem;
  font-weight: bold;
}
</style>

<div class="mx-n2">
  <ul class="nav nav-tabs">
    <li class="subnav-item"><%= translated(@recipe.name).capitalize %></li>
    <% if @recipe.group and @recipe.group.recipes.count > 1 %>
      <li class="nav-item dropdown">
        <a class="subnav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Versions</a>
        <div class="dropdown-menu">
          <% (@recipe.group.recipes.to_a - [@recipe]).each_with_index do |version, i| %>
            <div class="dropdown-item" href="#">
              <%= link_to version.version_name.blank? ? "Version #{i+1}" : version.version_name, version %>
              <%= render partial: 'rating', locals: {recipe: version} %>
            </div>
          <% end %>
        </div>
      </li>
    <% end %>
    <li class="nav-item dropdown">
      <a class="subnav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Menus</a>
      <div class="dropdown-menu">
        <% if @recipe.menus.blank? %>
          <div class="dropdown-item" href="#">Ne se retrouve dans aucun menu.</div>
        <% else %>
          <% @recipe.menus.each do |menu| %>
            <%= link_to translated(menu.name).capitalize, menu, class: "dropdown-item" %>
          <% end %>
        <% end %>
      </div>
    </li>
    <li class="nav-item">
      <%= link_to "Nouvelle version", new_recipe_path(clone_id: @recipe.id), class: "subnav-link" %>
    </li>
  </ul>
</div>

<% if @recipe.owned_by?(current_user) %>
  <%= link_to 'Edit', edit_recipe_path(@recipe) %> |
  <%= link_to 'Process', do_process_recipe_path(@recipe), method: :patch %> |
  <%= link_to 'Cheat', cheat_recipe_path(@recipe), method: :patch %> |
<% end %>
<%= link_to 'Back', recipes_path %>
<%# form_with(url: 'TODO', local: true, class: 'inline') do |form| %>
  <%# form.collection_select :unit_system, UnitSystem.all, :id, :name, selected: params[:unit_system_id], class: 'inline' %>
<%# end %>

<div class="responsive-margins-lg">
  <h1>
    <%= translated(@recipe.name).capitalize %>
    <!--<span style="font-size: 1.5rem;"><%# "(#{@recipe.version_name})" if @recipe.version_name %></span>-->
  </h1>

  <div class="mb-2"><%= link_to @recipe.source, @recipe.source, style: "color: gray;" if @recipe.source %></div>

  <!-- TODO: Si un ingrédient se retrouve plusieurs fois dans la recette, afficher un avertissement et la quantité totale comme ça le monde peuvent savoir s'ils en ont assez -->

  <% unless @recipe.ingredients.blank? %>

    <% ings = @recipe.ingredients.reject {|ing| ing.food.food_recipes.blank?} %>
    <% ings.each do |ing| %>

      <div style="border: solid 1px black; border-radius: 5px; padding: 5px; margin-bottom: 20px;">
        <b>Comment faire maison: <%= link_to ing.name, ing.food.producing_recipes.first %></b><br>
        
        <%= pretty_print_recipe(ing.food.producing_recipes.first) %>
      </div>

    <% end %>

    <h3>Recette</h3>

    <%= pretty_print_recipe(@recipe) %>

  <% end %>
  
  <h2>Recettes similaires</h2>

  <p>TODO</p>

  <p>Ou bien, remplacer ... par ...</p>

  <br><br><br>

  <strong>Code:</strong>
  <%= simple_format @recipe.instructions %>
  
  <br>

</div>

<%# javascript_pack_tag "recipe" %>
<%= javascript_pack_tag current_user ? "recipe_rating" : "recipe_rating_read_only" %>
