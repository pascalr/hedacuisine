<%
# FIXME DUPLICATED IN LIB/UTILS
def parse_args(sentence)
  words = sentence.split(' ', 2)
  args = (words[1] || '').split(',').map(&:strip).map {|a| parse_arg(a)}
end
# FIXME DUPLICATED IN LIB/UTILS
def parse_ingredient(quantity, unit_or_ingredient_name, ingredient_name, active_container)
    
  raise "Invalid quantity #{quantity}" unless quantity.is_a? Numeric

  if (ingredient_name)
    unit = Unit.find_by(name: unit_or_ingredient_name)
    raise "Invalid unit #{unit_or_ingredient_name}" unless unit
  end

  ingredient_name = ingredient_name || unit_or_ingredient_name
  food = Food.where('name = ? or plural = ?', ingredient_name, ingredient_name).first
  return nil unless food

  Ingredient.build(quantity, unit, food, active_container)
end
# FIXME DUPLICATED IN LIB/UTILS
def parse_arg(arg)
  return arg.to_i if arg.to_i.to_s == arg
  return arg.to_r if arg.to_r.to_s == arg
  return arg.to_f if arg.to_f.to_s == arg
  return arg
end
# Remove all the comments except the ones the special ones
# Strip the sentence
def preprocess_sentence(sentence)
  sentence.strip.gsub(/[^#]#[^\.#].*/, '')
end
def pretty_print_recipe(recipe)
  notes = []
  result = "<ol>"
  ingredient_list_started = false
  sentences = recipe.instructions.downcase.lines.map {|l| preprocess_sentence(l)}
  sentences.each_with_index do |sentence, i|
    puts sentence
    next if sentence.blank?
    next_sentence = sentences[i+1] if sentences.length > i+1

    # Handle ingredient list so they are grouped together
    if sentence.start_with?("ajouter") || sentence.start_with?("incorporer")
      unless ingredient_list_started
        result += "<ul>"
        ingredient_list_started = true
      end
      if sentence.start_with?("incorporer")
        args = parse_args(sentence)
        result += "<li>Le contenu du contenant ##{args[0]}.</li>"
      else
        args = parse_args(sentence)
        result += "<li>#{pretty_ingredient(parse_ingredient(args[0], args[1], args[2], nil))}</li>"
      end

    # Handle everything else
    else
      result += "</ul>" if ingredient_list_started
      ingredient_list_started = false

      cmd = ""
      if sentence.start_with?("contenant")
        nb = parse_args(sentence)[0]
        ings = recipe.ingredients.filter {|ing| ing.container_nb == nb}
        next if ings.blank?
        cmd = "Prendre le contenant ##{parse_args(sentence)[0]}"
        #ingredient_list_started
        #ings.each do |ing| # TODO: Only ingredients for this container (add container_id to ingredients)
        #  result += pretty_ingredient(ing)
        #end
      elsif sentence.start_with?("mijoter")
        cmd = "Faire mijoter pendant #{parse_args(sentence)[0]} minutes"
      elsif sentence.start_with?("pétrir")
        cmd = "Pétrir la pâte pendant #{parse_args(sentence)[0]} minutes"
      elsif sentence.start_with?("lever")
        cmd = "Laisser lever pendant #{parse_args(sentence)[0]} minutes"
      elsif sentence.start_with?("tremper")
        cmd = "Laisser tremper pendant #{parse_args(sentence)[0]} heures"
      elsif sentence.start_with?("brasser")
        cmd = "Brasser"
      elsif sentence.start_with?("mélanger")
        cmd = "Mélanger"
      elsif sentence.start_with?("battre")
        cmd = "Battre"
      elsif sentence.start_with?("remuer")
        cmd = "Remuer"
      elsif sentence.start_with?("#.")
        cmd = "#{sentence[2..-1].strip.capitalize}"
      elsif sentence.start_with?("##")
        notes << "<p><i>#{sentence[2..-1].strip.capitalize}</i></p>"
      end
      to_add = (next_sentence && (next_sentence.start_with?("ajouter") || next_sentence.start_with?("incorporer"))) ? ", puis ajouter:" : "."
      result += "<li>#{cmd}#{to_add}</li>" unless cmd.blank?
    end

  end
  @listing_ingredients = false
  result += "</ol>"
  result += notes.join('')
  result.html_safe
end
%>


<style>
.subnav-link {
  display: block;
  padding: 0.35rem 0.7rem;
  font-size: 0.9rem;
}
.subnav-item {
  display: block;
  padding: 0.35rem 0.7rem;
  font-size: 0.9rem;
  font-weight: bold;
}
</style>

<div class="mx-n2">
  <ul class="nav nav-tabs">
    <li class="subnav-item"><%= translated(@recipe.name).capitalize %></li>
    <% if @recipe.group and @recipe.group.recipes.count > 1 %>
      <li class="nav-item dropdown">
        <a class="subnav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Versions</a>
        <div class="dropdown-menu">
          <% (@recipe.group.recipes.to_a - [@recipe]).each_with_index do |version, i| %>
            <div class="dropdown-item" href="#">
              <%= link_to version.version_name.blank? ? "Version #{i+1}" : version.version_name, version %>
              <%= render partial: 'rating', locals: {recipe: version} %>
            </div>
          <% end %>
        </div>
      </li>
    <% end %>
    <li class="nav-item dropdown">
      <a class="subnav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Menus</a>
      <div class="dropdown-menu">
        <% if @recipe.menus.blank? %>
          <div class="dropdown-item" href="#">Ne se retrouve dans aucun menu.</div>
        <% else %>
          <% @recipe.menus.each do |menu| %>
            <%= link_to translated(menu.name).capitalize, menu, class: "dropdown-item" %>
          <% end %>
        <% end %>
      </div>
    </li>
    <li class="nav-item">
      <%= link_to "Nouvelle version", new_recipe_path(clone_id: @recipe.id), class: "subnav-link" %>
    </li>
  </ul>
</div>

<% if @recipe.owned_by?(current_user) %>
  <%= link_to 'Edit', edit_recipe_path(@recipe) %>
<% end %>
<%# form_with(url: 'TODO', local: true, class: 'inline') do |form| %>
  <%# form.collection_select :unit_system, UnitSystem.all, :id, :name, selected: params[:unit_system_id], class: 'inline' %>
<%# end %>

<div class="responsive-margins-lg">
  <h1>
    <%= translated(@recipe.name).capitalize %>
    <!--<span style="font-size: 1.5rem;"><%# "(#{@recipe.version_name})" if @recipe.version_name %></span>-->
  </h1>

  <div class="mb-2"><%= link_to @recipe.source, @recipe.source, style: "color: gray;" if @recipe.source %></div>

  <!-- TODO: Si un ingrédient se retrouve plusieurs fois dans la recette, afficher un avertissement et la quantité totale comme ça le monde peuvent savoir s'ils en ont assez -->

  <% unless @recipe.ingredients.blank? %>

    <% ings = @recipe.ingredients.reject {|ing| ing.food.food_recipes.blank?} %>
    <% ings.each do |ing| %>

      <div style="border: solid 1px black; border-radius: 5px; padding: 5px; margin-bottom: 20px;">
        <b>Comment faire maison: <%= link_to ing.name, ing.food.producing_recipes.first %></b><br>
        
        <%= pretty_print_recipe(ing.food.producing_recipes.first) %>
      </div>

    <% end %>

    <h3>Recette</h3>

    <div class="recipe-instructions">
      <%= pretty_complete_instructions(@recipe) %>
      <%# pretty_print_recipe(@recipe) %>
    </div>

  <% end %>

  <% unless @recipe.similar_recipes.blank? %>
    <h2>Recettes similaires</h2>

    <h3><%= link_to translated(@recipe.similar_recipes.first.name).capitalize, @recipe.similar_recipes.first %></h3>
    <%= pretty_print_recipe(@recipe.similar_recipes.first) %>
  <% end %>

  <br><br><br>

  <strong>Code:</strong>
  <%= simple_format @recipe.instructions %>
  
  <br>

</div>

<%# javascript_pack_tag "recipe" %>
<%= javascript_pack_tag current_user ? "recipe_rating" : "recipe_rating_read_only" %>
